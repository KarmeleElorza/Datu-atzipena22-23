package dambi.accessingmongoumeak.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import dambi.accessingmongoumeak.model.Pelikula;
import dambi.accessingmongoumeak.model.PelikulaRepository;

@RestController // This means that this class is a Controller baina @Controller bakarrik jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/filmoteka") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called umeaRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private PelikulaRepository pelikulaRepository;

	
	@GetMapping(path = "/peliGuztiak")
	public @ResponseBody Iterable<Pelikula> getAllFilms() {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findAll();
	}
	@GetMapping(path = "/peliById/{pelikulaId}")
	public @ResponseBody Pelikula getAllFilmsById(@PathVariable String pelikulaId) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findById(pelikulaId);
	}

	@GetMapping(path = "/aktorearenak/{aktorea}")
	public @ResponseBody Pelikula getAllFilmsByActor(@PathVariable String aktorea) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findByActor(aktorea);
	}

	@GetMapping(path = "/berriagoak/{urtea}")
	public @ResponseBody Pelikula getAllFilmsByActor(@PathVariable Integer urtea) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findByYear(urtea);
	}

	@GetMapping(path = "/zuzendariarenak/{zuzendaria}")
	public @ResponseBody Pelikula getAllFilmsByDirector(@PathVariable String zuzendaria) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findByDirector(zuzendaria);
	}
	 
}